React JS (https://react.dev/)
Note: React’s data flow between components is uni-directional (from parent to child only).

Introduction of React

- React js is a free and open-source front-end JavaScript library for creating UI component-based user interfaces.
- React is a popular JavaScript library for building SPAs due to its component-based architecture and efficient rendering.
- React is maintained by Meta.
- Current version of react is 18.
- It is client side scripting language.
- Real Life Examples where react has been used: Facebook, Instagram, What’s app, Netflix

How to create and run react applications

1. What is Create-react-app?
create-react-app is the best way to start building a new single-page application in React.

2. How to create react app?
The first step is to start your terminal/command prompt, navigate to the folder where you want to save your React application, and then execute this command:
Syntax: npx create-react-app my-app   (where npx is node package executor)

3. How to Run Your React Application
run "npm start" command to your vs code terminal, see your app live on localhost:3000.

Folder Structure of React

1. What is node_module folder?
The node_modules folder contains all of our dependencies, and this folder is ignored when we set up source control.

Note: If you delete the node_modules folder, the application will break because you'll no longer have your dependencies.

2. What is in public_folder file?
The public folder contains some static files, such as the HTML file(index.html).For example, change the title of your web app, add CDNs such as Google Fonts, and so on.

3. What is .gitignore file?
Just as the name suggests, it’s a file that specifies which files and folders will be ignored by our source control. (For git provider)

4. What is the src folder?
Where development takes place. 

src folder files: App.js, index.js, index.css, App.css

Basics Of React

1. Why do we use react rather than other technology?
- Easier to maintain and is flexible due to its modular structure

- To allow developers to create fast user interfaces for websites and applications alike easily

- Because of its component-based approach and virtual DOM, React is a lot faster than other frameworks

2. Single-page Application 
- A single-page application is an app that works inside a browser and does not require page reloading during use.

- web application or website that interacts with the user by dynamically rewriting the current page, rather than loading entire new pages from the server

- You are using this type of applications every day (ex:Gmail, Google Maps, Facebook or GitHub)

- Single-page sites help keep the user in one, comfortable web space where content is presented to the user in a simple, easy and workable fashion.

3. Multi-page Application
- Multiple-page applications work in a “traditional” way. Every change eg. display the data or submit data back to server requests rendering a new page from the server in the browser. 

- These applications are large, bigger than SPAs because they need to be. Due to the amount of content, these applications have many levels of UI.

4. What is component in react?
- Component represents a part of the user interface.

- Components are like functions that return HTML elements.

- Components are independent and reusable bits of code.

- Components come in two types: Class components and Function components

- Components are re-rendered whenever there are any changes made to the props or state.

5. Class component
- When creating a React component, the component's name MUST start with an upper case letter.

- A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.

- The functional components are not aware of the other components in your program whereas the class components can work with each other.

- We can pass data from one class component to another class component

Note: For now, keep in mind that we will use functional components only when we are sure that our component does not require interacting or work with any other component

6. The lifecycles of React components are divided into the following three sections:

Mounting: In this step, your initial states and data are initialized.

Updating: In the update section, you can access your states and data, and you can perform update operations on it.

Unmounting: Where component gets removed from the DOM.

7. Lifecycles also include three phases in execution

Render phase: Pure and has no side effects. Maybe paused, aborted, or restarted by React.

Pre-commit phase: Can read the DOM.

Commit phase: Can work with DOM, run side effects, schedule updates.

8. Virtual DOM
Works on: diffie algorithm

A react virtual DOM is formed whenever something new is introduced to the application, and it is visualized as a tree. A node in this tree represents each component of the application. Therefore, a new Virtual DOM tree is constructed whenever the state of any element changes.

Document - HTML document

Object - elements like h1, head, body

Model - complete document

9. How does virtual DOM actually make things faster?
When anything new is added to the application, a virtual DOM is created and it is represented as a tree. Each element/ component in the application is a node in this tree. So, whenever there is a change in the state of any element, a new Virtual DOM tree is created. This new Virtual DOM tree is then compared with the previous Virtual DOM tree and make a note of the changes. After this, it finds the best possible ways to make these changes to the real DOM. Now only the updated elements will get rendered on the page again.

Easy to do changes as it uses JSX and do the changes in the DOM 


10. Topic covered in JSX
- React JSX

- Benefits of JSX

- Expressions

- Attributes

- Specifying attribute values

- Children Elements in JSX

- Comments 

11. Why do we use babel in react?
- We use Babel with React to transpile the JSX code into simple React functions that can be understood by browsers. Using this way we can assure that our JSX code can work in almost any browser. 

- Babel can transpile modern JavaScript (ES6+, ESNext) into older versions of JavaScript that are widely supported.

12. Important functions provided by ReactDOM
render(): This is one of the most important methods of ReactDOM. This function is used to render a single React Component or several Components wrapped together in a Component or a div element. 

findDOMNode(): This function is generally used to get the DOM node where a particular React component was rendered. This method is very less used like the following can be done by adding a ref attribute to each component itself.

unmountComponentAtNode(): This function is used to unmount or remove the React Component that was rendered to a particular container.

hydrate(): This method is equivalent to the render() method but is implemented while using server-side rendering. 

createPortal(): It allow us to render a component into a DOM node that resides outside the current DOM hierarchy of the parent component. 

13. What are props in react?(https://www.linkedin.com/pulse/understanding-difference-between-props-state-react-basit-ch#:~:text=Props%20are%20used%20to%20pass,updated%20using%20the%20setState%20function.)

- Props, short for "properties," are a way to pass data from a parent component to a child component in React. Whenever we call child components from parents we can pass data as props. This helps the parent component communicate with the child.

- They allow you to send values, functions, or other data from one component to another.

- Props are read-only and immutable

There are 2 methods:
1. Passing the props
2. Receiving the props

14. ES6 concepts used in react (https://www.freecodecamp.org/news/how-to-use-es6-javascript-features-in-react/)

- Modules (Import/Export)

- Destructuring of Array 

- Spread Operator (copying arrays, combining arrays, and spreading object properties)

- Arrow functions

- Template Literals 

- Ternary operator

15. List(Array) in react
Lists are very useful when it comes to developing the UI of any website. Lists are mainly used for displaying menus on a website. For example, the navbar menu. In regular JavaScript, we can use arrays for creating lists. 

[1, 2, 3, 4] -> JS array / list

[

      {rollNo: 1, name: Rucha},

      {rollNo: 2, name: Rucha},

      {rollNo: 3, name: Rucha},

]

<tr key={} id={obj.rollNo}>

update(rollNo)

key={obj.id}

16. Keys in react
- A “key” is a special string attribute you need to include when creating lists of elements in React. Keys are used in React to identify which items in the list are changed, updated, or deleted.

- Keys are used to give an identity to the elements in the lists. It is recommended to use a string as a key that uniquely identifies the items in the list.  

- Keys allow React to keep track of elements. This way, if an item is updated or removed, only that item will be re-rendered instead of the entire list.

- Key attribute is used to track the changes in the list.

- Always prefer giving unique id to the key 

- If there is not any insert, update and delete in list then we can give index as a key 


17. React Hooks
Hooks don’t work inside classes — they let you use React without classes

With Hooks, you can extract stateful logic from a component so it can be tested independently and reused. Hooks allow you to reuse stateful logic without changing your component hierarchy. This makes it easy to share Hooks among many components or with the community.??

useState(): returns a pair: the current state value and a function that lets you update it. You can call this function from an event handler or somewhere else. 

To define state and it manages state update and changes.

The only argument to useState is the initial state.

Pros:

It takes a single argument, which is the initial state and returns an array with two elements: the current state and a function to update the state.

useState requires less boilerplate code compared to useReducer. There’s no need to define a separate action object or switch statement.


Cons: https:/wwwlinkedincompulsedont-use-usestate-hook-aritra-mondal#:~:text=More%20the%20number%20of%20usestate,from%20one%20page%20to%20another.

useState can become unwieldy if you need to manage complex state, especially if the state is deeply nested. In such cases, it can be difficult to update the state correctly.

Ex: Add to cart, Delete cart items

When to not use state when we don’t need to change any UI or values

useEffect(): The useEffect hook in React is use to handle the side effects in React such as fetching data, updating DOM, setting up subscriptions or timers etc can lead to unwarranted side effects 

Use: fetching data, directly updating the DOM, and timers.

(https://www.w3schools.com/react/react_useeffect.asp)

(https://dmitripavlutin.com/react-useeffect-explanation/)

Add dependency if you have to see change effect every time otherwise add empty square brackets.

There are 3 different types of useEffect():

No dependency passed: (useEffect will render infinite times)

An empty array: (only render once)

Props or state values: (Hook that is dependent on a variable. If the variable updates, the effect will run again)


useEffect Cleanup: Some effects require cleanup to reduce memory leaks. Also to stop infinite times rendering

useCallBack(): memorise the callback function to prevent recreation upon every render. Allowing you to avoid unnecessary re-rendering which makes your application more efficient.

const cachedFn = useCallback(fn, dependencies)

fn: The function value that you want to cache. It can take any arguments and return any values. React will return (not call!) your function back to you during the initial render. On next renders, React will give you the same function again if the dependencies have not changed since the last render. Otherwise, it will give you the function that you have passed during the current render, and store it in case it can be reused later. React will not call your function. The function is returned to you so you can decide when and whether to call it.

18. Global State(Redux is used for global state)
- Global state makes managing shared data easier. Storing all of an application's state in a global object makes it easier to manage from a single location rather than having to pass data down through the component hierarchy. It can make code easier to understand and maintain.

- It also enables communication between components that are not directly connected.


19. React Memo : [https://dmitripavlutin.com/use-react-memo-wisely/]

- React.memo only checks for prop changes. If a function component wrapped in React.memo has a useState, useReducer or useContext Hook in its implementation, it will still re-render when state or context change.

- To improve user interface performance, React offers a higher-order component React.memo(). When React.memo() wraps a (child)component, React memoizes the rendered output of the wrapped component and then skips unnecessary re-renderings.

20. Pure Component [https://www.scaler.com/topics/react/pure-component-in-react/]

- To skip re-rendering a class component for same props and state, extend PureComponent instead of component.

- It will only render if props or state get updated or changed.

- To prevent a component from re-rendering because of its parent's re-render, you can declare it as a sub class of PureComponent.

- It is similar to React.Memo in functional component.

21. React lifecycle

- Mounting lifecycle methods, that is inserting elements into the DOM.

- Updating, which involves methods for updating components in the DOM.

- Unmounting, that is removing a component from the DOM.

22. React lifecycle of Components

Initialization: This is the stage where the component is constructed with the given Props and default state. This is done in the constructor of a Component Class.

Mounting: Mounting is the stage of rendering the JSX returned by the render method itself

Updating: Updating is the stage when the state of a component is updated and the application is repainted.

Unmounting: As the name suggests unmounting is the final step of the component lifecycle where the component is removed from the page.

23. React Fragments(<> </>)

- It wraps a component without using div tag.

- React Fragment is a feature in React that allows you to return multiple elements from a React component by allowing you to group a list of children without adding extra nodes to the DOM.

- With React Fragments, we can create code that is cleaner and easier to read. It renders components more quickly and uses less memory.

Note: If we have to give key then we must right React.Fragment in opening and closing tag.

24. React Refs 

- React refs are a powerful feature that allows you to access and manipulate the DOM directly.
https://www.geeksforgeeks.org/reactjs-refs/?ref=lbp

https://www.javatpoint.com/react-refs

https://blog.logrocket.com/complete-guide-react-refs/

Hooks
1. useState()

The useState() hook works by handling and managing state in your applications.

It returns an array with two values: the current state and a function to update it.

This hooks takes some initial state and returns two value. First value contains the state and the second value is a function which updates the state. The value passed in useState will be treated as the default value.

2. useEffect() [https://www.scaler.com/topics/react/useeffect/]

The useEffect hook accepts two arguments where the second argument is optional.
useEffect(<FUNCTION>, <DEPENDECY>)

3. useCallBack()
useCallback is a React hook that is used to optimize the performance of functional components, especially those that involve passing functions as props to child components. 

It allows you to memoize a function, preventing it from being recreated on each render unless its dependencies change. This can be helpful in scenarios where you want to avoid unnecessary re-renders and optimize your component's performance.

useCallback(callbackFunction, dependencyArray);

4. useRef(): 
It can be used to access a DOM element directly.

useRef() only returns one item. It returns an Object called current.

Benefits of useRef:

Stops re-renders (we can use in useEffect hook )
Accessing the DOM elements
Tracking of Previous State Changes

5. useMemo():
The React useMemo Hook returns a memoized value.

The useMemo Hook only re-renders when one of its dependencies update/change.

6. useLayoutEffect():
It will call function first and after then it will return JSX whereas other hooks first returns JSX and after then call function.

It is called before the component is render.

Ex: If you want to show loader before loading your data then it is best to use this hook.

25. Context Provider (https://www.telerik.com/blogs/react-usecontext-hook)
Useful: Context is particularly useful when dealing with data that is considered “global” or needs to be accessible by many components within the application.

Context provides a way to pass data or state through the component tree without having to pass props down manually through each nested component.

If there are few components that need to use the same state and they all have a common parent which can store it. But once you have too many components that need the same state and/or they are too far apart in the React component tree, passing the state down through props becomes a nightmare.

To begin, we first need to create the Context object with the createContext() function.

Create Context:
Context is created using a createContext function. The function takes the initial value of the Context as a parameter and returns the Context created.
Props drilling problem can be solved by Context Provider
You must Import createContext and initialize it: 
	Import { createContext } from ‘react’;

	const UserContext = createContext()

Context Provider to wrap the tree of components that need the state Context.

Wrap child components in the Context Provider and supply the state value.

Context Provider:
To have context available in the entire component tree, we need to wrap the parent component markup with the Context provider to have all child components subscribe to Context changes.

Wrap child components in the Context Provider and supply the state value.

And specify the context value in the value prop of <Context.Provider>

const App = () => {

  return <Context.Provider value={{ data: "Data from context!" }}>

/* ... */

</Context.Provider>;

};

useContext Hook
The useContext Hook provides function components access to the context value for a context object.

useContext is a React hook that provides a way to share data (context) across multiple components without explicitly passing it through props. It is part of the React Context API, which is built into the React library.

Higher-Order Component(HOC)????
A higher-order component is a function that takes a component and returns a new component.

HOCs basically incorporate the don’t-repeat-yourself (DRY) principle of programming

Higher-order components (HOCs) are a powerful feature of the React library. They allow you to reuse component logic across multiple components.

In React, a higher-order component is a function that takes a component as an argument and returns a new component that wraps the original component.

This is a function that takes a component as input and returns a new component with additional functionality.

const newComponent = higherFunction(WrappedComponent);

Conditional Rendering: https://www.freecodecamp.org/news/react-conditional-rendering/#:~:text=In%20React%2C%20conditional%20rendering%20is,what%20content%20should%20be%20rendered.

React Router: 

React Router is a Javascript framework that lets us handle client and server-side routing in React applications.

It enables the creation of single-page web or mobile apps that allow navigating without refreshing the page. 

Command: npm install react-router-dom@6 

Import React Router

import { BrowserRouter, Routes, Route } from "react-router-dom";


Questions:

Q. What is re-rendering?
Data goes from parent components to child components in React via props. When the data changes, React immediately renders the affected components again. Rendering is the process of updating the virtual DOM with new data and calculating the fewest modifications required to update the actual DOM.

Q. When to use react memo?
Ans: Pure functional component: Your component is functional and given the same props, always renders the same output.
Renders often: Your component renders often.
Re-renders with same props: Your component is usually provided with the same props during re-rendering.

Q. Why we use Pure component?
Ans: components are re-rendered whenever there are any changes made to the props or state, but many times it happens that the changes made to the state or props do not change them but still a re-render takes place. This is an unnecessary re-render and can be saved to increase the performance of react apps.

For these performance benefits, we utilize pure components in React.

Q. Pros of Pure component
Ans: They prevent the re-rendering if props and state are the same.
     Increases performance.
     Shallow comparison of state and props

Q. Why do we import useState?
Ans: It lets us keep local state in a function component.

Q. What happens if we don’t use key to our list?
Ans: It will give warning in console that, Each child in a list should have a unique “key” prop

Q. React Memo?
Ans: Add memo to child component it will stop re-rendering of the child component if props or functions are not changed or updated

Q. Global State?
Ans: We use redux library

Q. What is Virtual Dom ?
Ans: The virtual DOM is a concept used in React to improve the efficiency of updating the user interface. It is a lightweight copy or representation of the actual DOM (Document Object Model) that React maintains in memory.

Q. What is React Dom?
Ans: ReactDOM is a package in React that provides methods for interacting with the DOM.It is specifically responsible for rendering React components to the actual DOM.

ReactDOM.render() is the primary method used to render a React element or component into a root DOM node.

It is a package that renders our component/elements into DOM

Q. What is the use of hooks?

Q. Why do we use hooks?

Q. Pros and cons of hooks?(useState)

Q. When useEffect() hook goes in the infinite loop?
Ans: Not specifying dependencies: The most common cause of infinite loops is not specifying dependencies correctly. If you do not pass any dependencies, the hook will be called after every render, leading to an infinite loop. To avoid this, you should always specify the dependencies that the hook depends on.

Modifying the state inside the hook: Another common mistake is modifying the state inside the useEffect hook. When you modify the state inside the hook, it triggers a re-render, which causes the hook to be called again. This creates an infinite loop.

Q. Any alternatives of hooks?

Q. What is e.target.value?
Ans: Stores input field value

Q. What is stateless and stateful component?
Ans: Stateful component which has state and props
     Stateless component has only props

Types of useEffect
First time all the useEffect will call one time
Empty Array - will run once 
Array means dependency is given - intially will call once
Only function - if state and props will change then useEffect will call 

Q. Functional component is Pure component or not?
Ans: React.Memo() is considered as pure component

Q. Difference between Component and Function 
Ans: First letter will be capital in component name’s and whereas function’s first letter will be small

Q. Difference of Dependencies and dev-dependencies 
Dependency:
It contains the library, which your project requires for production environments and functioning effectively. 
You require these packages to test and run your project on the localhost. 

Dev-dependencies:
devDependencies are those packages that you need only for project development purposes. Example- Babel, Webpack, etc. 
These types of dependencies are required during the web application development process but not while testing or executing it.  

Q. What is readme file in react file?
Ans: The Readme file is often the first file that the users read.
We can describe a README file as a guide that gives users a detailed description of a project you have worked on. It can also be described as documentation with guidelines on how to use a project. Usually it will have instructions on how to install and run the project

Q. What is package.json in react file?
Ans: The main purpose of this file is to hold various metadata related to the project. The file is used to provide the information to the node package manager (NPM) that allows identifying the project and its dependencies.
It contains all the dependencies and dev-dependencies

Q. What is package-lock.json file?
Ans: It contains detail of node module files
It records the exact version of every installed dependency, including its sub-dependencies and their versions

Q. Difference between useCallback and useMemo
Ans: useCallback returns a memoized callback function, while useMemo returns a memoized value. Both hooks can be used to optimize the performance of your React components by avoiding unnecessary re-creations of functions or values.

Q. What is props drilling?
Ans: When we pass state as "props" through each nested component. This is called "prop drilling".

Q. Example of HOC 
Ans: Redux, React Router, Material-UI

Q. Why do we use HO in react?
Ans: This is where HOCs come in. Higher-order components allow developers to reuse code logic in their projects. As a result, this means less repetition and more optimized, readable code.

Different ways to apply CSS to react js - https://salehmubashar.com/blog/different-ways-to-add-css-in-react-js

Hooks examples: https://www.pragimtech.com/blog/reactjs/usecontext-hook-in-react/

Passing Data from Parent to Child in React: https://www.altogic.com/blog/passing-data-from-parent-to-child-in-react#:~:text=Props%2C%20short%20for%20properties%2C%20are,component%20to%20a%20child%20component.&text=In%20this%20example%2C%20the%20parent,object%20and%20renders%20the%20value.

Q. setState is async or sync?
Ans: Async

Q. Difference between useState and useRef
Ans: useState is an asynchronous hook and it doesn’t change the state immediately, it has to wait for the component to re-render.useRef is a synchronous hook that updates the state immediately and persists its value through the component’s lifecycle, but it doesn’t trigger a re-render.